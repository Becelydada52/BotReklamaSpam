from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from keyboards import Keyboards
from services import Jobservice
from urllib.parse import urlparse

router = Router()
jobs_service = Jobservice()

class AddJob(StatesGroup):
    city_choise = State()
    new_city_name = State()
    title = State()
    desc = State()
    url = State()

def is_admin(user_id: int) -> bool:
    return jobs_service.is_admin(user_id)


#==–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å==
@router.message(CommandStart())
async def start_cmd(message: Message):
    cities = jobs_service.get_cities()
    if not cities:
        return await message.answer("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=Keyboards.reply_menu(is_admin(message.from_user.id))
    )
    await message.answer("üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))

@router.message(F.text.casefold() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_start(message: Message):
    await start_cmd(message)

@router.message(F.text.casefold() == "–∞–¥–º–∏–Ω–∫–∞")
async def open_admin_panel(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddJob.city_choise)
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=Keyboards.admin(jobs_service.get_cities())
    )

@router.callback_query(F.data.startswith("city:"))
async def choose_city(callback: CallbackQuery):
    city = callback.data.split(":")[1]
    vacancies = jobs_service.get_jobs(city)
    if not vacancies:
        await callback.message.edit_text(
            f"üìç –í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.",
            reply_markup=Keyboards.back("back:cities")
        )
    else:
        await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
                                        reply_markup=Keyboards.jobs(city, vacancies))
    await callback.answer()

@router.callback_query(F.data == "back:cities")
async def back_cities(callback: CallbackQuery):
    cities = jobs_service.get_cities()
    if not cities:
        await callback.message.edit_text("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    else:
        await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))
    await callback.answer()


@router.callback_query(F.data.startswith("job:"))
async def choose_job(callback: CallbackQuery):
    _, city, index = callback.data.split(":")
    index = int(index)
    job = jobs_service.get_job(city, index)
    await callback.message.edit_text(f"üíº {job['title']}\n\n{job['desc']}",
                                    reply_markup=Keyboards.job_detail(city, index, job["url"]))
    await callback.answer()

# ==–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)==
@router.callback_query(F.data == "back:cities")
async def back_to_cities(callback: CallbackQuery):
    cities = jobs_service.get_cities()
    if not cities:
        await callback.message.edit_text("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    else:
        await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))
    await callback.answer()

@router.callback_query(F.data.startswith("back:jobs:"))
async def back_to_jobs(callback: CallbackQuery):
    _, _, city = callback.data.split(":")
    vacancies = jobs_service.get_jobs(city)
    await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
                                    reply_markup=Keyboards.jobs(city, vacancies))
    await callback.answer()


#==–ê–¥–º–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ FSM(–Ω–µ –∑–Ω–∞–µ—à—å –Ω–µ –ª–µ–∑—å)==
@router.message(F.text == "/addjob")
async def cmd_addjob(message: Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddJob.city_choise)
    await message.answer("üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:", reply_markup=Keyboards.admin(jobs_service.get_cities()))

@router.callback_query(F.data.startswith("admin_city:"))
async def fsm_city(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split(":")[1]
    if city == "new":
        await callback.message.answer(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=Keyboards.admin_back_to_city()
        )
        await state.set_state(AddJob.new_city_name)
    else:
        await state.update_data(city=city)
        await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}")
        await state.set_state(AddJob.title)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())
    await callback.answer()    

@router.message(AddJob.new_city_name)
async def fsm_new_city_name(message: Message, state: FSMContext):
    city = message.text.strip()
    jobs_service.add_city(city)
    await state.update_data(city=city)
    await message.answer(f"‚úÖ –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.set_state(AddJob.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())

@router.message(AddJob.title)
async def fsm_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(AddJob.desc)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_title())

@router.message(AddJob.desc)
async def fsm_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text.strip())
    await state.set_state(AddJob.url)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É:", reply_markup=Keyboards.admin_back_to_desc())

@router.message(AddJob.url)
async def fsm_url(message: Message, state: FSMContext):
    url_text = message.text.strip()
    parsed = urlparse(url_text)
    if parsed.scheme not in ("http", "https") or not parsed.netloc:
        await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://")
        return

    data = await state.get_data()
    city = data["city"]
    title = data["title"]
    desc = data["desc"]
    jobs_service.add_job(city, title, desc, url_text)
    await state.clear()
    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüìç {city}\nüíº {title}\nüìù {desc}\nüîó {url_text}")

# ==–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ (–∞–¥–º–∏–Ω FSM)==
@router.callback_query(F.data == "admin_back_to_city")
async def admin_back_city(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.city_choise)
    try:
        await callback.message.edit_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=Keyboards.admin(jobs_service.get_cities())
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back_to_title")
async def admin_back_title(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.title)
    try:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back_to_desc")
async def admin_back_desc(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.desc)
    try:
        await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_title())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=Keyboards.admin(jobs_service.get_cities())
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()