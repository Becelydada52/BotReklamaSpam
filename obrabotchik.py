from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.exceptions import TelegramBadRequest
from keyboards import Keyboards
from services import Jobservice
from urllib.parse import urlparse
import logging
import sys
import os

router = Router()
jobs_service = Jobservice()
logger = logging.getLogger(__name__)



async def resolve_to_user_id(text: str, bot) -> int | None:
    logger.debug("resolve_to_user_id: raw='%s'", text)
    value = text.strip()
    if not value:
        logger.debug("resolve_to_user_id: empty input")
        return None
    if value.startswith("@"):
        try:
            chat = await bot.get_chat(value)
            uid = int(chat.id)
            logger.debug("resolve_to_user_id: @ resolved username=%s -> uid=%d", value, uid)
            return uid
        except Exception as e:
            logger.warning("resolve_to_user_id: failed to resolve username=%s error=%s", value, e)
            return None
    try:
        uid = int(value)
        logger.debug("resolve_to_user_id: parsed uid=%d", uid)
        return uid
    except ValueError:
        logger.warning("resolve_to_user_id: invalid numeric value='%s'", value)
        return None

async def display_name(bot, uid: int) -> str:
    try:
        chat = await bot.get_chat(uid)
        if getattr(chat, "username", None):
            return f"@{chat.username}"
        if getattr(chat, "full_name", None):
            return f"{chat.full_name} ({uid})"
    except Exception:
        pass
    return str(uid)


async def send_new_and_delete(callback: CallbackQuery, text: str, reply_markup=None):
    new_msg = await callback.message.answer(text, reply_markup=reply_markup)
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    return new_msg

class AddJob(StatesGroup):
    city_choise = State()
    new_city_name = State()
    title = State()
    desc = State()
    url = State()

class AdminEdit(StatesGroup):
    rename_city = State()
    edit_title = State()
    edit_desc = State()
    edit_url = State()

def is_admin(user_id: int) -> bool:
    return jobs_service.is_admin(user_id)

def is_super_admin(user_id: int) -> bool:
    return jobs_service.is_super_admin(user_id)

def is_developer(user_id: int) -> bool:
    return jobs_service.is_developer(user_id)

def has_admin_access(user_id: int) -> bool:
    return jobs_service.has_admin_access(user_id)


class RolesEdit(StatesGroup):
    add_admin = State()
    remove_admin = State()
    add_sadmin = State()
    remove_sadmin = State()


#==–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å==
@router.message(CommandStart())
async def start_cmd(message: Message):
    cities = jobs_service.get_cities()
    if not cities:
        return await message.answer("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=Keyboards.reply_menu(has_admin_access(message.from_user.id))
    )
    await message.answer("üëã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É —Ä–∞–±–æ—Ç—ã. –°–∫–æ—Ä–µ–µ –≤—ã–±–∏—Ä–∞–π –≥–æ—Ä–æ–¥. –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))

@router.message(F.text.casefold() == "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_start(message: Message):
    await start_cmd(message)

@router.message(F.text.casefold() == "–∞–¥–º–∏–Ω–∫–∞")
async def open_admin_panel(message: Message, state: FSMContext):
    if not has_admin_access(message.from_user.id):
        return await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddJob.city_choise)
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

# == –ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–æ–º –∏ —Ä–∞–±–æ—Ç–∞–º–∏ ==
@router.callback_query(F.data.startswith("manage_city:"))
async def admin_manage_city(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    city = callback.data.split(":")[1]
    await state.update_data(city=city)
    await callback.message.edit_text(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä–æ–¥–∞: {city}", reply_markup=Keyboards.admin_city_menu(city))
    await callback.answer()

@router.callback_query(F.data.startswith("admin_jobs:"))
async def admin_list_jobs(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    city = callback.data.split(":")[1]
    await state.update_data(city=city)
    vacancies = jobs_service.get_jobs(city)
    text = f"üìã –†–∞–±–æ—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ: {city}"
    await callback.message.edit_text(text, reply_markup=Keyboards.admin_jobs(city, vacancies))
    await callback.answer()

@router.callback_query(F.data.startswith("admin_job:"))
async def admin_job_menu(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, city, idx = callback.data.split(":")
    index = int(idx)
    job = jobs_service.get_job(city, index)
    await state.update_data(city=city, index=index)
    text = f"üíº {job['title']}\n\n{job['desc']}\n\nüîó {job.get('url','-')}"
    await callback.message.edit_text(text, reply_markup=Keyboards.admin_job_menu(city, index))
    await callback.answer()

@router.callback_query(F.data.startswith("admin_city_rename:"))
async def admin_city_rename_start(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    city = callback.data.split(":")[1]
    await state.update_data(city=city)
    await state.set_state(AdminEdit.rename_city)
    await send_new_and_delete(callback, f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}':", reply_markup=Keyboards.admin_back_to_city())
    await callback.answer()

@router.message(AdminEdit.rename_city)
async def admin_city_rename_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    old_city = data.get("city")
    new_city = message.text.strip()
    if not new_city:
        return await message.answer("‚ö† –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
    ok = jobs_service.rename_city(old_city, new_city)
    await state.clear()
    if not ok:
        return await message.answer("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–æ–≤–æ–µ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
    await message.answer(
        "‚úÖ –ì–æ—Ä–æ–¥ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

@router.callback_query(F.data.startswith("admin_city_delete:"))
async def admin_city_delete(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    city = callback.data.split(":")[1]
    ok = jobs_service.delete_city(city)
    text = "‚úÖ –ì–æ—Ä–æ–¥ —É–¥–∞–ª—ë–Ω" if ok else "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥"
    await state.set_state(AddJob.city_choise)
    await callback.message.edit_text(
        text,
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(callback.from_user.id) or is_developer(callback.from_user.id)),
            can_manage_bot=is_developer(callback.from_user.id)
        )
    )
    await callback.answer()

@router.callback_query(F.data.startswith("admin_job_edit_title:"))
async def admin_job_edit_title_start(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, city, idx = callback.data.split(":")
    await state.update_data(city=city, index=int(idx))
    await state.set_state(AdminEdit.edit_title)
    await send_new_and_delete(callback, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_desc())
    await callback.answer()

@router.message(AdminEdit.edit_title)
async def admin_job_edit_title_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data["city"]
    index = int(data["index"])
    title = message.text.strip()
    jobs_service.update_job(city, index, title=title)
    await state.clear()
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=Keyboards.admin_jobs(city, jobs_service.get_jobs(city)))

@router.callback_query(F.data.startswith("admin_job_edit_desc:"))
async def admin_job_edit_desc_start(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, city, idx = callback.data.split(":")
    await state.update_data(city=city, index=int(idx))
    await state.set_state(AdminEdit.edit_desc)
    await send_new_and_delete(callback, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", reply_markup=Keyboards.admin_back_to_desc())
    await callback.answer()

@router.message(AdminEdit.edit_desc)
async def admin_job_edit_desc_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data["city"]
    index = int(data["index"])
    desc = message.text.strip()
    jobs_service.update_job(city, index, desc=desc)
    await state.clear()
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", reply_markup=Keyboards.admin_jobs(city, jobs_service.get_jobs(city)))

@router.callback_query(F.data.startswith("admin_job_edit_url:"))
async def admin_job_edit_url_start(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, city, idx = callback.data.split(":")
    await state.update_data(city=city, index=int(idx))
    await state.set_state(AdminEdit.edit_url)
    await send_new_and_delete(callback, "üîó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (http/https):", reply_markup=Keyboards.admin_back_to_desc())
    await callback.answer()

@router.message(AdminEdit.edit_url)
async def admin_job_edit_url_finish(message: Message, state: FSMContext):
    data = await state.get_data()
    city = data["city"]
    index = int(data["index"])
    url_text = message.text.strip()
    parsed = urlparse(url_text)
    if parsed.scheme not in ("http", "https") or not parsed.netloc:
        return await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://")
    jobs_service.update_job(city, index, url=url_text)
    await state.clear()
    await message.answer("‚úÖ –°—Å—ã–ª–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", reply_markup=Keyboards.admin_jobs(city, jobs_service.get_jobs(city)))

@router.callback_query(F.data.startswith("admin_job_delete:"))
async def admin_job_delete(callback: CallbackQuery, state: FSMContext):
    if not has_admin_access(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    _, city, idx = callback.data.split(":")
    index = int(idx)
    ok = jobs_service.delete_job(city, index)
    vacancies = jobs_service.get_jobs(city)
    text = "‚úÖ –†–∞–±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω–∞" if ok else "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É"
    await callback.message.edit_text(text, reply_markup=Keyboards.admin_jobs(city, vacancies))
    await callback.answer()

@router.callback_query(F.data.startswith("city:"))
async def choose_city(callback: CallbackQuery):
    city = callback.data.split(":")[1]
    vacancies = jobs_service.get_jobs(city)
    if not vacancies:
        await callback.message.edit_text(
            f"üìç –í –≥–æ—Ä–æ–¥–µ {city} –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞–±–æ—Ç.",
            reply_markup=Keyboards.back("back:cities")
        )
    else:
        await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
                                        reply_markup=Keyboards.jobs(city, vacancies))
    await callback.answer()

@router.callback_query(F.data == "back:cities")
async def back_cities(callback: CallbackQuery):
    cities = jobs_service.get_cities()
    if not cities:
        await callback.message.edit_text("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    else:
        await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))
    await callback.answer()


@router.callback_query(F.data.startswith("job:"))
async def choose_job(callback: CallbackQuery):
    _, city, index = callback.data.split(":")
    index = int(index)
    job = jobs_service.get_job(city, index)
    await callback.message.edit_text(f"üíº {job['title']}\n\n{job['desc']}",
                                    reply_markup=Keyboards.job_detail(city, index, job["url"]))
    await callback.answer()

# ==–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)==
@router.callback_query(F.data == "back:cities")
async def back_to_cities(callback: CallbackQuery):
    cities = jobs_service.get_cities()
    if not cities:
        await callback.message.edit_text("‚ö† –í –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
    else:
        await callback.message.edit_text("üëã –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=Keyboards.cities(cities))
    await callback.answer()

@router.callback_query(F.data.startswith("back:jobs:"))
async def back_to_jobs(callback: CallbackQuery):
    _, _, city = callback.data.split(":")
    vacancies = jobs_service.get_jobs(city)
    await callback.message.edit_text(f"üìç –ì–æ—Ä–æ–¥: {city}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:",
                                    reply_markup=Keyboards.jobs(city, vacancies))
    await callback.answer()


#==–ê–¥–º–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ FSM(–Ω–µ –∑–Ω–∞–µ—à—å –Ω–µ –ª–µ–∑—å)==
@router.message(F.text == "/addjob")
async def cmd_addjob(message: Message, state: FSMContext):
    if not has_admin_access(message.from_user.id):
        return await message.answer("‚ö† –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    await state.set_state(AddJob.city_choise)
    await message.answer(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

@router.callback_query(F.data.startswith("admin_city:"))
async def fsm_city(callback: CallbackQuery, state: FSMContext):
    city = callback.data.split(":")[1]
    if city == "new":
        await callback.message.answer(
            "‚úç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=Keyboards.admin_back_to_city()
        )
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
        await state.set_state(AddJob.new_city_name)
    else:
        await state.update_data(city=city)
        await callback.message.answer(f"–í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}")
        await state.set_state(AddJob.title)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())
        try:
            await callback.message.delete()
        except TelegramBadRequest:
            pass
    await callback.answer()    

@router.message(AddJob.new_city_name)
async def fsm_new_city_name(message: Message, state: FSMContext):
    city = message.text.strip()
    jobs_service.add_city(city)
    await state.update_data(city=city)
    await message.answer(f"‚úÖ –ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ '{city}' –¥–æ–±–∞–≤–ª–µ–Ω.")
    await state.set_state(AddJob.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())

@router.message(AddJob.title)
async def fsm_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(AddJob.desc)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_title())

@router.message(AddJob.desc)
async def fsm_desc(message: Message, state: FSMContext):
    await state.update_data(desc=message.text.strip())
    await state.set_state(AddJob.url)
    await message.answer("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É:", reply_markup=Keyboards.admin_back_to_desc())

@router.message(AddJob.url)
async def fsm_url(message: Message, state: FSMContext):
    url_text = message.text.strip()
    parsed = urlparse(url_text)
    if parsed.scheme not in ("http", "https") or not parsed.netloc:
        await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http:// –∏–ª–∏ https://")
        return

    data = await state.get_data()
    city = data["city"]
    title = data["title"]
    desc = data["desc"]
    jobs_service.add_job(city, title, desc, url_text)
    await state.clear()
    await message.answer(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüìç {city}\nüíº {title}\nüìù {desc}\nüîó {url_text}")

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ ===
@router.callback_query(F.data == "roles_menu")
async def open_roles_menu(callback: CallbackQuery):
    uid = callback.from_user.id
    if not (is_super_admin(uid) or is_developer(uid)):
        logger.warning("open_roles_menu: no permissions uid=%d", uid)
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    await callback.message.edit_text(
        "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
        reply_markup=Keyboards.roles_menu(is_dev=is_developer(uid))
    )
    logger.debug("open_roles_menu shown to uid=%d", uid)
    await callback.answer()

@router.callback_query(F.data.startswith("role:"))
async def role_action_start(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    uid = callback.from_user.id
    if action in ("add_admin", "remove_admin"):
        if not (is_super_admin(uid) or is_developer(uid)):
            return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    elif action in ("add_sadmin", "remove_sadmin"):
        if not is_developer(uid):
            return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)

    mapping = {
        "add_admin": (RolesEdit.add_admin, "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ê–¥–º–∏–Ω—ã:"),
        "remove_admin": (RolesEdit.remove_admin, "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ê–¥–º–∏–Ω–æ–≤:"),
        "add_sadmin": (RolesEdit.add_sadmin, "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω—ã:"),
        "remove_sadmin": (RolesEdit.remove_sadmin, "–í–≤–µ–¥–∏—Ç–µ @username –∏–ª–∏ user_id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–≤:"),
    }
    state_to_set, prompt = mapping[action]
    await state.set_state(state_to_set)
    await send_new_and_delete(callback, f"{prompt}", reply_markup=Keyboards.admin_back_to_city())
    await callback.answer()


# == –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ==
@router.callback_query(F.data == "roles:list_admins")
async def list_admins(callback: CallbackQuery):
    uid = callback.from_user.id
    if not (is_super_admin(uid) or is_developer(uid)):
        logger.warning("list_admins: no permissions uid=%d", uid)
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    roles = jobs_service.roles
    logger.debug(
        "list_admins opened by uid=%d (admins=%d, sadmins=%d, devs=%d)",
        uid, len(roles.get("admins", [])), len(roles.get("super_admins", [])), len(roles.get("developers", []))
    )
    text = "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"
    all_ids = set(roles.get("admins", [])) | set(roles.get("super_admins", [])) | set(roles.get("developers", []))
    buttons = []
    for tid in sorted(all_ids):
        name = await display_name(callback.message.bot, tid)
        tags = []
        if tid in roles.get("admins", []):
            tags.append("–ê–¥–º–∏–Ω")
        if tid in roles.get("super_admins", []):
            tags.append("–°—É–ø–µ—Ä-–ê–¥–º–∏–Ω")
        if tid in roles.get("developers", []):
            tags.append("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
        tag_str = ",".join(tags)
        label = f"{name} ‚Äî {tag_str}" if tag_str else name
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"roles:manage_user:{tid}")])
    buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="roles_menu")])
    markup = InlineKeyboardMarkup(inline_keyboard=buttons if buttons else [[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="roles_menu")]])
    await callback.message.edit_text(text, reply_markup=markup)
    await callback.answer()


@router.callback_query(F.data.startswith("roles:manage_user:"))
async def manage_user(callback: CallbackQuery):
    actor = callback.from_user.id
    if not (is_super_admin(actor) or is_developer(actor)):
        logger.warning("manage_user: no permissions actor=%d data=%s", actor, callback.data)
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    target_id = int(callback.data.split(":")[2])
    logger.debug("manage_user: actor=%d target=%d", actor, target_id)
    await render_manage_user(callback.message, actor, target_id)
    await callback.answer()


@router.callback_query(F.data.startswith("roles:toggle:"))
async def toggle_role(callback: CallbackQuery):
    actor = callback.from_user.id
    _, _, role, uid_str = callback.data.split(":")
    target_id = int(uid_str)
    if role == "admin":
        if not (is_super_admin(actor) or is_developer(actor)):
            logger.warning("toggle_role: deny actor=%d role=%s target=%d", actor, role, target_id)
            return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        if jobs_service.is_admin(target_id):
            jobs_service.remove_admin(target_id)
            logger.info("toggle_role: removed admin actor=%d target=%d", actor, target_id)
        else:
            jobs_service.add_admin(target_id)
            logger.info("toggle_role: added admin actor=%d target=%d", actor, target_id)
    elif role == "sadmin":
        if not is_developer(actor):
            logger.warning("toggle_role: deny actor=%d role=%s target=%d", actor, role, target_id)
            return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        if jobs_service.is_super_admin(target_id):
            jobs_service.remove_super_admin(target_id)
            logger.info("toggle_role: removed sadmin actor=%d target=%d", actor, target_id)
        else:
            jobs_service.add_super_admin(target_id)
            logger.info("toggle_role: added sadmin actor=%d target=%d", actor, target_id)
    elif role == "dev":
        if not is_developer(actor):
            logger.warning("toggle_role: deny actor=%d role=%s target=%d", actor, role, target_id)
            return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        if jobs_service.is_developer(target_id):
            jobs_service.remove_developer(target_id)
            logger.info("toggle_role: removed dev actor=%d target=%d", actor, target_id)
        else:
            jobs_service.add_developer(target_id)
            logger.info("toggle_role: added dev actor=%d target=%d", actor, target_id)
    else:
        logger.error("toggle_role: unknown role=%s by actor=%d data=%s", role, actor, callback.data)
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å", show_alert=True)

    await render_manage_user(callback.message, actor, target_id)
    await callback.answer()


async def render_manage_user(message: Message, actor: int, target_id: int):
    logger.debug("render_manage_user: actor=%d target=%d", actor, target_id)
    name = await display_name(message.bot, target_id)
    tags = []
    if jobs_service.is_admin(target_id):
        tags.append("–ê–¥–º–∏–Ω")
    if jobs_service.is_super_admin(target_id):
        tags.append("–°—É–ø–µ—Ä –ê–¥–º–∏–Ω")
    if jobs_service.is_developer(target_id):
        tags.append("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫")
    info = ", ".join(tags) if tags else "–±–µ–∑ —Ä–æ–ª–µ–π"
    text = f"üë§ {name}\n–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: {info}"

    kb_rows = []
    if is_super_admin(actor) or is_developer(actor):
        if jobs_service.is_admin(target_id):
            kb_rows.append([InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –ê–¥–º–∏–Ω–æ–≤", callback_data=f"roles:toggle:admin:{target_id}")])
        else:
            kb_rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ê–¥–º–∏–Ω—ã", callback_data=f"roles:toggle:admin:{target_id}")])

    if is_developer(actor):
        if jobs_service.is_super_admin(target_id):
            kb_rows.append([InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω–æ–≤", callback_data=f"roles:toggle:sadmin:{target_id}")])
        else:
            kb_rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –°—É–ø–µ—Ä –ê–¥–º–∏–Ω—ã", callback_data=f"roles:toggle:sadmin:{target_id}")])
        if jobs_service.is_developer(target_id):
            kb_rows.append([InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–∑ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", callback_data=f"roles:toggle:dev:{target_id}")])
        else:
            kb_rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", callback_data=f"roles:toggle:dev:{target_id}")])
    kb_rows.append([InlineKeyboardButton(text="‚¨Ö –ö —Å–ø–∏—Å–∫—É", callback_data="roles:list_admins")])
    await message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows))

@router.message(RolesEdit.add_admin)
async def add_admin_finish(message: Message, state: FSMContext):
    if not (is_super_admin(message.from_user.id) or is_developer(message.from_user.id)):
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    uid = await resolve_to_user_id(message.text, message.bot)
    if uid is None:
        return await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π user_id")
    jobs_service.add_admin(int(uid))
    await state.clear()
    await message.answer(
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

@router.message(RolesEdit.remove_admin)
async def remove_admin_finish(message: Message, state: FSMContext):
    if not (is_super_admin(message.from_user.id) or is_developer(message.from_user.id)):
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    uid = await resolve_to_user_id(message.text, message.bot)
    if uid is None:
        return await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π user_id")
    jobs_service.remove_admin(int(uid))
    await state.clear()
    await message.answer(
        "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

@router.message(RolesEdit.add_sadmin)
async def add_sadmin_finish(message: Message, state: FSMContext):
    if not is_developer(message.from_user.id):
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    uid = await resolve_to_user_id(message.text, message.bot)
    if uid is None:
        return await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π user_id")
    jobs_service.add_super_admin(int(uid))
    await state.clear()
    await message.answer(
        "‚úÖ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

@router.message(RolesEdit.remove_sadmin)
async def remove_sadmin_finish(message: Message, state: FSMContext):
    if not is_developer(message.from_user.id):
        return await message.answer("–ù–µ—Ç –ø—Ä–∞–≤")
    uid = await resolve_to_user_id(message.text, message.bot)
    if uid is None:
        return await message.answer("‚ö† –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username –∏–ª–∏ —á–∏—Å–ª–æ–≤–æ–π user_id")
    jobs_service.remove_super_admin(int(uid))
    await state.clear()
    await message.answer(
        "‚úÖ –°—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–¥–∞–ª—ë–Ω",
        reply_markup=Keyboards.admin(
            jobs_service.get_cities(),
            can_manage_roles=(is_super_admin(message.from_user.id) or is_developer(message.from_user.id)),
            can_manage_bot=is_developer(message.from_user.id)
        )
    )

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) ===
@router.callback_query(F.data == "dev_menu")
async def dev_menu(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    await callback.message.edit_text("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", reply_markup=Keyboards.dev_controls())
    await callback.answer()

@router.callback_query(F.data == "dev:restart")
async def dev_restart(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    await callback.message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await callback.answer()
    try:
        os.execl(sys.executable, sys.executable, *sys.argv)
    except Exception:
        os._exit(0)

@router.callback_query(F.data == "dev:stop")
async def dev_stop(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    await callback.message.answer("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    await callback.answer()
    os._exit(0)

# === –õ–æ–≥–∏ –∏ —É—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) ===
@router.callback_query(F.data == "dev:logs_tail")
async def dev_logs_tail(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    log_path = os.path.join(os.path.dirname(__file__), "logs", "bot.log")
    if not os.path.exists(log_path):
        return await callback.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω", show_alert=True)
    try:
        with open(log_path, "r", encoding="utf-8", errors="ignore") as f:
            lines = f.readlines()
        tail = "".join(lines[-200:])
        if len(tail) > 3500:
            tail = tail[-3500:]
        text = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–æ–≤:\n" + ("```\n" + tail + "\n```")
        await callback.message.edit_text(text, reply_markup=Keyboards.dev_controls(), parse_mode="Markdown")
    except Exception as e:
        logger.exception("Failed to read logs: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–∏", show_alert=True)

@router.callback_query(F.data == "dev:logs_download")
async def dev_logs_download(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    log_path = os.path.join(os.path.dirname(__file__), "logs", "bot.log")
    if not os.path.exists(log_path):
        return await callback.answer("–§–∞–π–ª –ª–æ–≥–æ–≤ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω", show_alert=True)
    try:
        await callback.message.answer_document(FSInputFile(log_path), caption="–§–∞–π–ª –ª–æ–≥–æ–≤")
        await callback.answer()
    except Exception as e:
        logger.exception("Failed to send log file: %s", e)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤", show_alert=True)

@router.callback_query(F.data == "dev:loglevel")
async def dev_loglevel(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    current_level = logging.getLevelName(logging.getLogger().level)
    await callback.message.edit_text(f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {current_level}", reply_markup=Keyboards.log_levels(current_level))
    await callback.answer()

@router.callback_query(F.data.startswith("dev:loglevel:set:"))
async def dev_set_loglevel(callback: CallbackQuery):
    if not is_developer(callback.from_user.id):
        return await callback.answer("–ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
    level_name = callback.data.split(":")[-1].upper()
    if level_name not in ("DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"):
        return await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å", show_alert=True)
    lvl = getattr(logging, level_name)
    root = logging.getLogger()
    root.setLevel(lvl)
    logging.getLogger("aiogram").setLevel(max(logging.INFO, lvl))
    logger.info("Log level changed to %s by uid=%d", level_name, callback.from_user.id)
    await callback.message.edit_text(f"–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {level_name}", reply_markup=Keyboards.log_levels(level_name))
    await callback.answer()

# ==–ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥ (–∞–¥–º–∏–Ω FSM)==
@router.callback_query(F.data == "admin_back_to_city")
async def admin_back_city(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.city_choise)
    try:
        await callback.message.edit_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=Keyboards.admin(
                jobs_service.get_cities(),
                can_manage_roles=(is_super_admin(callback.from_user.id) or is_developer(callback.from_user.id)),
                can_manage_bot=is_developer(callback.from_user.id)
            )
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back_to_title")
async def admin_back_title(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.title)
    try:
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_city())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back_to_desc")
async def admin_back_desc(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AddJob.desc)
    try:
        await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:", reply_markup=Keyboards.admin_back_to_title())
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.edit_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π:",
            reply_markup=Keyboards.admin(jobs_service.get_cities())
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e).lower():
            raise
    await callback.answer()