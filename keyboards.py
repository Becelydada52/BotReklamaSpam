from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from urllib.parse import urlparse

class Keyboards:

    @staticmethod
    def cities(cities: list[str]):
        buttons = []
        for city in cities:
            buttons.append([InlineKeyboardButton(text=city, callback_data=f"city:{city}")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def jobs(city, vacancies):
        buttons = []
        for i, vacancy in enumerate(vacancies):
            buttons.append([InlineKeyboardButton(text=vacancy["title"], callback_data=f"job:{city}:{i}")])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back:cities")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def job_detail(city, index, url):
        def _is_valid_http_url(u: str) -> bool:
            try:
                parsed = urlparse(u)
                return parsed.scheme in ("http", "https") and bool(parsed.netloc)
            except Exception:
                return False

        buttons = []
        if _is_valid_http_url(url):
            buttons.append([InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º", url=url)])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ö —Å–ø–∏—Å–∫—É —Ä–∞–±–æ—Ç", callback_data=f"back:jobs:{city}")])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ö –≥–æ—Ä–æ–¥–∞–º", callback_data=f"back:cities")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def admin(cities, can_manage_roles: bool = False, can_manage_bot: bool = False):
        buttons = []
        for city in cities:
            buttons.append([
                InlineKeyboardButton(text=f"üìã {city}", callback_data=f"manage_city:{city}"),
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_city:{city}")
            ])
        buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥", callback_data="admin_city:new")])
        if can_manage_roles:
            buttons.append([InlineKeyboardButton(text="üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏", callback_data="roles_menu")])
        if can_manage_bot:
            buttons.append([InlineKeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º", callback_data="dev_menu")])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def admin_city_menu(city: str):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"admin_city_rename:{city}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data=f"admin_city_delete:{city}")],
            [InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç", callback_data=f"admin_jobs:{city}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="admin_back_to_city")]
        ])

    @staticmethod
    def admin_jobs(city: str, vacancies: list[dict]):
        buttons = []
        for i, v in enumerate(vacancies):
            buttons.append([InlineKeyboardButton(text=v["title"], callback_data=f"admin_job:{city}:{i}")])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"manage_city:{city}")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def admin_job_menu(city: str, index: int):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"admin_job_edit_title:{city}:{index}")],
            [InlineKeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"admin_job_edit_desc:{city}:{index}")],
            [InlineKeyboardButton(text="üîó –°—Å—ã–ª–∫–∞", callback_data=f"admin_job_edit_url:{city}:{index}")],
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É", callback_data=f"admin_job_delete:{city}:{index}")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ —Ä–∞–±–æ—Ç–∞–º", callback_data=f"admin_jobs:{city}")]
        ])

    @staticmethod
    def reply_start():
        return ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]],
            resize_keyboard=True,
            one_time_keyboard=False
        )

    @staticmethod
    def reply_menu(has_admin_access: bool = False):
        if has_admin_access:
            return ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), KeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞")]],
                resize_keyboard=True,
                one_time_keyboard=False
            )
        else:
            return Keyboards.reply_start()

    @staticmethod
    def admin_back_to_city():
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º", callback_data="admin_back_to_city")]]
        )

    @staticmethod
    def admin_back_to_title():
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back_to_title")]]
        )

    @staticmethod
    def admin_back_to_desc():
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back_to_desc")]]
        )

    @staticmethod
    def back(callback_data: str, text: str = "‚¨Ö –ù–∞–∑–∞–¥"):
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text=text, callback_data=callback_data)]])

    # ===–ú–µ–Ω—é —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π===
    @staticmethod
    def roles_menu(is_dev: bool):
        buttons = [
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="role:add_admin")],
            [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="role:remove_admin")],
            [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="roles:list_admins")],
        ]
        if is_dev:
            buttons.extend([
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞", callback_data="role:add_sadmin")],
                [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞", callback_data="role:remove_sadmin")],
            ])
        buttons.append([InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back_to_city")])
        return InlineKeyboardMarkup(inline_keyboard=buttons)

    @staticmethod
    def dev_controls():
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="dev:restart")],
            [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="dev:stop")],
            [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="admin_back_to_city")],
        ])